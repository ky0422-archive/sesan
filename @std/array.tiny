func __expect_array(arr, name, callback) {
    if (typeof(arr) != 'ARRAY') {
        throw('invalid argument: ' + name + '() must provide an array');
    } else {
        callback();
    }
};


// Example:
//
// let arr = [1, 2, 3];
// push(arr, 4); // [1, 2, 3, 4];

func push(arr, value) {
    __expect_array(arr, 'push', func() {
        __builtin_push(arr, value);
    });
};


// Example:
//
// let arr = [1, 2, 3];
// pop(arr); // [1, 2];

func pop(arr) {
    __expect_array(arr, 'pop', func() {
        __builtin_pop(arr);
    });
};


// Example:
//
// let arr = [1, 2, 3];
// shift(arr); // [2, 3];

func shift(arr) {
    __expect_array(arr, 'shift', func() {
        __builtin_shift(arr);
    });
};


// Example:
//
// let arr = [1, 2, 3];
// unshift(arr, 0); // [0, 1, 2, 3];

func unshift(arr, value) {
    __expect_array(arr, 'unshift', func() {
        __builtin_unshift(arr, value);
    });
};


// Example:
//
// let arr = [1, 2, 3];
// slice(arr, 1, 2); // [2];

func slice(arr, start, end) {
    __expect_array(arr, 'slice', func() {
        __builtin_slice(arr, start, end);
    });
};


// Example:
//
// let arr = [1, 2, 3];
// forEach(arr, func(value, index) {
//     println(index, value);
// });

func forEach(arr, callback) {
    __builtin_forEach(arr, callback);
};


// Example:
//
// repeat('foo', 3); // ['foo', 'foo', 'foo'];
// repeat(5); // [NULL, NULL, NULL, NULL, NULL];

@func(true);
func repeat(x, r) {
    return match(length(__builtin__arguments('repeat')), [
        [1, func(value) {
            let _x = 0;
            let result = [];

            while (_x < x) {
                result = push(result, null());
                _x = _x + 1;
            }

            return result;
        }],
        [2, func(value) {
            let _x = 0;
            let result = [];

            while (_x < r) {
                result = push(result, x);
                _x = _x + 1;
                println(_x)
            }

            return result;
        }]
    ], func(value) {
        throw('invalid argument: repeat() must provide 1 or 2 arguments, got ' + string(value));
    });
};