let funcTools = {
    capture: { capture: true },
    skip: { skipCheckArguments: true }
};

func length(value) { return __builtin_length(value); }

func match(value, case, default) {
    let result = null;

    forEach(case, func (item, index) {
        if (item[0] == value) result = item[1](value);
    });

    if ((typeof result) == 'NULL') result = default(value);

    return result;
}

func number(value) { return convert(value, 'number'); }

func string(value) { return convert(value, 'string'); }

func boolean(value) { return convert(value, 'boolean'); }

func ternary(condition, trueValue, falseValue) {
    return if (!!condition) trueValue; else falseValue;
}

func split(value, separator) { return __builtin_split(value, separator); }

@funcTools <- skip
func concat() {
    return join(this <- arguments, ' ');
}

func implement() {
    throw 'Not implemented';

    return null;
}
