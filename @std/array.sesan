/// Standard Library: Array
/// 
/// Author: @tsukiroku (https://github.com/tsukiroku)
/// Updated on 2022/08/23 (06:45 PM, KST)

func push(arr, value) __builtin_push(arr, value);

func pop(arr) __builtin_pop(arr);

func shift(arr) __builtin_shift(arr);

func unshift(arr, value) __builtin_unshift(arr, value);

func slice(arr, start, end) __builtin_slice(arr, start, end);

@funcTools <- skip;
func join(arr, separator) 
    if (length(this <- arguments) == 2) __builtin_join(arr, separator)
    else __builtin_join(arr, ' ');

func forEach(arr, callback) __builtin_forEach(arr, callback);

@funcTools <- skip;
func repeat(x, r) 
    match(length(this <- arguments), [
        [1, func(value) {
            let count = 0;
            let result = [];

            while (count < x) {
                result = push(result, null);
                count = count + 1;
            }

            return result;
        }],
        [2, func(value) {
            let count = 0;
            let result = [];

            while (count < r) {
                result = push(result, x);
                count = count + 1;
            }

            return result;
        }]
    ], func(value) null);

func reduce(arr, callback, initial) {
    let result = initial;

    forEach(arr, func (value, _) { 
        let callbackResult = callback(result, value); 

        if (typeof callbackResult == 'boolean') callbackResult;

        result = callbackResult;
    });

    return result;
}

func map(arr, callback) {
    let result = [];

    forEach(arr, func (value, _) (result = push(result, callback(value))));

    return result;
}
