// Tiny interpreter in Tiny language
// WIP, For reference only.

func tokenizer(input) {
    let current = { pos: 0, readPos: 0, ch: '' };

    @funcTools <- capture
    func readChar() {
        if (current <- readPos >= length(input))
            current['ch'] = '\0';
        else current['ch'] = split(input, '') <- (current <- readPos);

        current['pos'] = current <- readPos;
        current['readPos'] = current <- readPos + 1;
    }

    @funcTools <- capture
    func skipWhitespace() {
        while (
            (current <- ch == ' ') || (current <- ch == '\t') ||
            (current <- ch == '\n') || (current <- ch == '\r')
        ) {
            readChar();
        }
    }

    @funcTools <- capture
    func peekChar() {
        if (current <- readPos >= length(input)) return '\0';
        else return split(input, '') <- (current <- readPos);
    }

    @funcTools <- capture
    func readIdent() {
        let pos = current <- pos;

        if (!isDigit(current <- ch)) {
            while (isLetter(current <- ch) || isDigit(current <- ch)) {
                readChar();
            }

            let literal = join(slice(split(input, ''), pos, current <- pos), '');

            return {
                type: (
                        if (ch == 'let') 'LET';
                        else 'IDENT';
                    ),
                literal
            };
        } else throw 'Error';
    }

    @funcTools <- capture
    func readNumber() {
        let pos = current <- pos;

        let isFloat = false;

        while (isDigit(current <- ch)) {
            if (current <- ch == '.') {
                if (isFloat) throw 'Error';

                isFloat = true;
            }

            readChar();
        }

        return {
            type: 'NUMBER',
            literal: number(subString(input, pos, current <- pos))
        };
    }

    @funcTools <- capture
    func isLetter(ch) {
        return regex('[a-zA-Z]', 'g', ch) <- test() || (ch == '_');
    }

    @funcTools <- capture
    func isDigit(ch) {
        return regex('[0-9]', 'g', ch) <- test() || (ch == '.');
    }

    @funcTools <- capture
    func nextToken() {
        let token = { type: '', literal: '' };

        skipWhitespace();

        let _ch = current <- ch;

        func expect(value) { return _ch == value; }

        if (expect('\0'))       token = { type: 'EOF', literal: '' };
        else if (expect('='))   token = { type: 'ASSIGN', literal: '=' };
        else if (expect(';'))   token = { type: 'SEMICOLON', literal: ';' };
        else if (isLetter(_ch)) token = readIdent();
        else if (isDigit(_ch))  token = readNumber();
        else                    token = { type: 'ILLEGAL', literal: _ch };

        if (
            ((token <- type) == 'IDENT') || 
            ((token <- type) == 'LET') || 
            ((token <- type) == 'NUMBER')) {
            return token;
        }

        readChar();

        return token;
    }

    nextToken();

    return { readChar, skipWhitespace, nextToken, peekChar };
}

let t = tokenizer('let _x = 3.14;');

forEach(true, func (_) {
    let token = (t <- nextToken)();

    println(token);

    if ((token <- type) == 'EOF') return false;
});
